# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
      - master
    always: true

variables:
  # API App
  buildConfiguration: 'Release'
  connectionStrng: $(ConnectionString)
  jwtSecret: $(JwtSecretKey)
  audience: $(JwtAudience)
  issuer: $(JwtIssuer)
  feedbackEmails: $(FeedbackRecipients)
  netCoreEnv: $(Env)
  key: $(ApiKey)

  # Slack App
  mUrl: $(MainUrl)
  signingSecret: $(SlackSigningSecret)
  authToken: $(SlackAuthToken)
  ghOrganization: $(GitHubOrganization)
  ghAppId: $(GitHubAppId)
  ghPrivateRsaKey: $(GitHubAppPrivateRSAKey)
  ghAppInstallationId: $(GitHubAppInstallationId)
  introChannelId: $(IntroductionChannelId)
  privileged: $(PrivilegedMembers)

  # Mail Engine
  sbConnectionString: $(ServiceBusConnectionString)
  sbQueueName: $(ServiceBusQueueName)
  sendGridTemplatesKey: $(SendGridTemplatesApiKey)
  azStorageConnectionString: $(TableStorageConnectionString)
  azStorageTableName: $(StorageTableName)
  azStorageMailTrackingTableName: $(MailTrackingTableName)

  # Pub Jobs
  pubEndpoint: $(PubApiEndpoint)
  
  # Code Coverage 
  codeCovKey: $(CodeCovToken)

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - script: dotnet restore src/Pub/
    displayName: 'dotnet restore'

  # output of this build does not get used, soley for CI purposes
  - script: dotnet build -c $(buildConfiguration) src/Pub/ -o out
    displayName: 'dotnet build $(buildConfiguration)'
  
  # Run test projects and generate code coverage
  - script: dotnet test src/Pub/ --settings src/Pub/coverlet.runsettings.xml
    displayName: 'dotnet test'

  # Upload code coverage report
  - task: Bash@3
    displayName: Upload Coverage Report to CodeCov 
    inputs:
      targetType: 'inline'
      script: 'curl -s https://codecov.io/bash > codecov && chmod +x codecov && ./codecov -f "src/**/coverage.opencover.xml" -t $(codeCovKey)' # Required when targetType == inline

  - task: Docker@1
    displayName: Container registry login
    inputs:
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: DockerHub
      command: login
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
  - script: docker build -t roymoran/pub-api -f ci/Dockerfile src/Pub
    displayName: 'build docker api image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    
  - script: docker push roymoran/pub-api
    displayName: 'push api image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
  - script: docker build -t roymoran/pub-slack-app -f ci/slackapp.Dockerfile src/Pub
    displayName: 'build docker slack app image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
  - script: docker push roymoran/pub-slack-app
    displayName: 'push slack app image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
  - script: docker build -t roymoran/pub-mail-engine -f ci/mailengine.Dockerfile src/Pub
    displayName: 'build docker mail engine'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
  - script: docker push roymoran/pub-mail-engine
    displayName: 'push mail engine image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: docker build -t roymoran/pubjobs -f ci/pubjobs.Dockerfile src/Pub
    displayName: 'build pub jobs docker image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  
    
  - script: docker push roymoran/pubjobs
    displayName: 'push docker image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: docker build -t roymoran/pub-slack-app-bot -f ci/slackappbot.Dockerfile src/Pub
    displayName: 'build slack app bot docker image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  
    
  - script: docker push roymoran/pub-slack-app-bot
    displayName: 'push docker image'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
