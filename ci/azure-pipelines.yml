# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  # API App
  buildConfiguration: 'Release'
  connectionStrng: $(ConnectionString)
  jwtSecret: $(JwtSecretKey)
  audience: $(JwtAudience)
  issuer: $(JwtIssuer)
  server: $(SmtpServer)
  port: $(SmtpPort)
  username: $(SmtpUsername)
  password: $(SmtpPassword)
  feedbackEmails: $(FeedbackRecipients)
  netCoreEnv: $(Env)

  # Slack App
  aUrl: $(AppUrl)
  mUrl: $(MainUrl)
  signingSecret: $(SlackSigningSecret)
  authToken: $(SlackAuthToken)
  ghOrganization: $(GitHubOrganization)
  ghAppId: $(GitHubAppId)
  ghPrivateRsaKey: $(GitHubAppPrivateRSAKey)
  ghAppInstallationId: $(GitHubAppInstallationId)
  introChannelId: $(IntroductionChannelId)

  # Mail Engine
  sbConnectionString: $(ServiceBusConnectionString)
  sbQueueName: $(ServiceBusQueueName)
  sendGridTemplatesKey: $(SendGridTemplatesApiKey)
  azStorageConnectionString: $(TableStorageConnectionString)
  azStorageTableName: $(StorageTableName)

steps:

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    contents: '**/*'
    targetFolder: $(Build.ArtifactStagingDirectory)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

- task: PublishBuildArtifacts@1
  displayName: 'Publish src to: $(Build.ArtifactStagingDirectory)'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'deploy' 
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  

- script: dotnet restore src/Pub/
  displayName: 'dotnet restore'

# output of this build does not get used, soley for CI purposes
- script: dotnet build -c $(buildConfiguration) src/Pub/ -o out
  displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet test src/Pub/
  displayName: 'dotnet test'

- task: Docker@1
  displayName: Container registry login
  inputs:
    containerregistrytype: Container Registry
    dockerRegistryEndpoint: DockerHub
    command: login
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- script: docker build --build-arg NETCORE_ENV="$(netCoreEnv)" --build-arg SMTP_SERVER="$(server)" --build-arg SMTP_PORT="$(port)" --build-arg SMTP_USERNAME="$(username)" --build-arg SMTP_PASSWORD="$(password)" --build-arg FEEDBACK_RECIPIENTS="$(feedbackEmails)" --build-arg CONNECTION_STRING="$(connectionString)" --build-arg JWT_SECRET_KEY="$(jwtSecret)" --build-arg JWT_AUDIENCE="$(audience)" --build-arg JWT_ISSUER="$(issuer)" --build-arg SEND_GRID_TEMPLATES_API_KEY="$(sendGridTemplatesKey)" --build-arg TABLE_STORAGE_CONNECTION_STRING="$(azStorageConnectionString)" --build-arg STORAGE_TABLE_NAME="$(azStorageTableName)" --build-arg SERVICE_BUS_CONNECTION_STRING="$(sbConnectionString)" --build-arg SERVICE_BUS_QUEUE_NAME="$(sbQueueName)" -t roymoran/pub-api:build -f ci/Dockerfile src/Pub
  displayName: 'build docker api image'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  
- script: docker push roymoran/pub-api:build
  displayName: 'push api image'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- script: docker build --build-arg CONNECTION_STRING="$(connectionString)" --build-arg APP_URL="$(aUrl)" --build-arg MAIN_URL="$(mUrl)" --build-arg SLACK_AUTH_TOKEN="$(authToken)" --build-arg SLACK_SIGNING_SECRET="$(signingSecret)" --build-arg GITHUB_APP_PRIVATE_RSA_KEY="$(ghPrivateRsaKey)" --build-arg GITHUB_APP_ID="$(ghAppId)" --build-arg GITHUB_APP_INSTALLATION_ID="$(ghAppInstallationId)" --build-arg GITHUB_ORGANIZATION="$(ghOrganization)" --build-arg INTRODUCTION_CHANNEL_ID="$(introChannelId)" -t roymoran/pub-slack-app:build -f ci/slackapp.Dockerfile src/Pub
  displayName: 'build docker slack app image'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- script: docker push roymoran/pub-slack-app:build
  displayName: 'push slack app image'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- script: docker build --build-arg NETCORE_ENV="$(netCoreEnv)" --build-arg CONNECTION_STRING="$(connectionString)" --build-arg SERVICE_BUS_CONNECTION_STRING="$(sbConnectionString)" --build-arg SERVICE_BUS_QUEUE_NAME="$(sbQueueName)" --build-arg APP_URL="$(aUrl)" --build-arg SEND_GRID_TEMPLATES_API_KEY="$(sendGridTemplatesKey)" --build-arg TABLE_STORAGE_CONNECTION_STRING="$(azStorageConnectionString)" --build-arg STORAGE_TABLE_NAME="$(azStorageTableName)" -t roymoran/pub-mail-engine:build -f ci/mailengine.Dockerfile src/Pub
  displayName: 'build docker mail engine'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- script: docker push roymoran/pub-mail-engine:build
  displayName: 'push mail engine image'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))